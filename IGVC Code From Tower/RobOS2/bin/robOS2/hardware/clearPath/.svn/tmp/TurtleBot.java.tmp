package robOS2.hardware.clearPath;

import org.apache.log4j.Logger;

import robOS2.hardware.interfaces.drivers.IFourMotorInterface;
import robOS2.hardware.interfaces.drivers.IGenericMotor;
import robOS2.serial.Connection;

/**
 * Provides a "driver" for Turtlebot so it can be used with RobOS2.
 * This driver allows the robot to accomplish simple tasks, such as driving
 * forward, turning and backing up.
 * 
 * @author dbaratta
 */
public class TurtleBot implements IGenericMotor, IFourMotorInterface{
	private static Logger log = Logger.getLogger(TurtleBot.class.getName());
	private Connection _conn;
	
	private int _velocity;
	private int _rotVelocity;
	
	/**
	 * 
	 * @param conn
	 */
	public TurtleBot(Connection conn) {
		_conn = conn;
		
		/**
		 * Setup commands
		 */
		//Start command
		
		byte data[] = {(byte) 0x80, (byte) 0x83};
		
		//Puts into safe mode
		_conn.writeData(data);

	}

	@Override
	public int queryLeftFrontEncoder() {
		// TODO Auto-generated method stub
		return 0;
	}

	/**
	 * The iRobot Create does NOT have a left rear encoder.
	 * This method will ALWAYS return -1 for this platform
	 */
	@Deprecated
	@Override
	public int queryLeftRearEncoder() {
		log.warn("The iRobot Create does NOT have a left rear motor encoder.");
		return -1;
	}

	@Override
	public int queryRightFrontEncoder() {
		// TODO Auto-generated method stub
		return 0;
	}

	/**
	 * The iRobot Create does NOT have a right rear encoder.
	 * This method will ALWAYS return -1 for this platform
	 */
	@Deprecated
	@Override
	public int queryRightRearEncoder() {
		log.warn("The iRobot Create does NOT have a right rear motor encoder.");
		return -1;
	}
	/**
	 * The iRobot Create does not have an EStop function
	 */
	@Deprecated
	@Override
	public void resetEStop() {
		log.warn("The iRobot Create does not support EStop");		
	}
	@Override
	public void setForwardVelocity(int velocity) {
		//Multiplied by 5 because input is between -100 and 100 and turtle bot takes in
		//between -500 and 500
		_velocity = velocity * 5;
		this.sendVelocity();		
	}

	@Override
	public void setRotationalVelocity(int velocity) {
		//Multiplied by 20 because the input is between -100 and 100 and turtle bot takes in 
		//a value between -2000 and 2000
		_rotVelocity = velocity * 20;	
		this.sendVelocity();
	}
	
	private void sendVelocity() {
		_conn.writeData("137");
		//Sends high and low bytes for the velocity
		if(_velocity > 255 || _velocity < 0) {
			String vel = "" + _velocity;
			log.debug("Velocity: " + vel);
			_conn.writeData(vel);
		} else if(_velocity == 0){
			log.debug("Velocity: sending zeros");
			_conn.writeData("0");
			_conn.writeData("0");
		} else {
			String vel = "" + _velocity;
			_conn.writeData("0");
			_conn.writeData(vel);
			log.debug("Velocity: " + vel);
		}
		//Sends high and low bytes for the rotational velocity
		if(_rotVelocity > 255 || _rotVelocity < 0) {
			String rVel = "" + _rotVelocity;
			_conn.writeData(rVel);
			log.debug("Rotation: " + rVel);
		} else if(_rotVelocity == 0){
			_conn.writeData("0");
			_conn.writeData("0");
			log.debug("Rotation: Sending Zeros");
		} else {
			String rVel = "" + _rotVelocity;
			_conn.writeData("0");
			_conn.writeData(rVel);
			log.debug("Rotation: " + rVel);
		}
	}
<<<<<<< .mine
	/*private byte intToByte(int integer) {
		String by = Integer.toBinaryString(integer);
		byte bi = (byte) (137);
	}*/
=======

	@Override
	public void updateLeftFront(int speed) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void updateLeftRear(int speed) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void updateRightFront(int speed) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void updateRightRear(int speed) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void updateRobotStatusScreen(String update) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void updateRemoteStatusScreen(String update) {
		// TODO Auto-generated method stub
		
	}
>>>>>>> .r228
	
}
